name: Deploy Cloud Run App

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - destroy
          - plan-and-apply

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  APP_NAME: sample-bot-app
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.action == 'plan-and-apply' && 'production' || '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Build and push with Cloud Build
      if: github.event.inputs.action == 'create'
      run: |
        gcloud builds submit --tag $REGION-docker.pkg.dev/$PROJECT_ID/$APP_NAME/$APP_NAME:latest || true
        echo "Build submitted - check GCP Console for detailed logs if needed"

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=$TF_STATE_BUCKET" \
          -backend-config="prefix=terraform/state"

    - name: Terraform Plan (Create)
      if: github.event.inputs.action == 'create'
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="project_id=$PROJECT_ID" \
          -var="region=$REGION" \
          -var="app_name=$APP_NAME" \
          -var="tf_state_bucket=$TF_STATE_BUCKET"

    - name: Terraform Apply (Create)
      if: github.event.inputs.action == 'create'
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve \
          -var="project_id=$PROJECT_ID" \
          -var="region=$REGION" \
          -var="app_name=$APP_NAME" \
          -var="tf_state_bucket=$TF_STATE_BUCKET"

    - name: Terraform Plan with Output (Plan-and-Apply)
      if: github.event.inputs.action == 'plan-and-apply'
      working-directory: ./terraform
      run: |
        terraform plan -out=tfplan \
          -var="project_id=$PROJECT_ID" \
          -var="region=$REGION" \
          -var="app_name=$APP_NAME" \
          -var="tf_state_bucket=$TF_STATE_BUCKET"
        
        # Check if there are changes
        if terraform show -no-color tfplan | grep -q "No changes"; then
          echo "No changes detected. Stopping pipeline."
          echo "HAS_CHANGES=false" >> $GITHUB_ENV
        else
          echo "Changes detected. Will proceed to apply."
          echo "HAS_CHANGES=true" >> $GITHUB_ENV
        fi

    - name: Manual Approval
      if: github.event.inputs.action == 'plan-and-apply' && env.HAS_CHANGES == 'true'
      run: |
        echo "‚ö†Ô∏è  CHANGES DETECTED - Review the plan above"
        echo "üìã Plan shows infrastructure changes will be made"
        echo "‚úÖ Proceeding to apply (manual approval can be added via GitHub Environments)"

    - name: Terraform Apply (Plan-and-Apply)
      if: github.event.inputs.action == 'plan-and-apply' && env.HAS_CHANGES == 'true'
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      working-directory: ./terraform
      run: |
        terraform destroy -auto-approve \
          -var="project_id=$PROJECT_ID" \
          -var="region=$REGION" \
          -var="app_name=$APP_NAME" \
          -var="tf_state_bucket=$TF_STATE_BUCKET"